-module(t).
-export([t/0]).
-export([program/0]).
-export([getcol/3]).

%% program() ->
%%     [3,8,1005,8,335,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,
%%      0,8,10,4,10,102,1,8,28,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,101,0,8,
%%      51,1006,0,82,1006,0,56,1,1107,0,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,
%%      1001,8,0,83,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,104,1006,0,58,3,
%%      8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,1001,8,0,129,1006,0,54,1006,0,50,1006,
%%      0,31,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,102,1,8,161,2,101,14,10,1006,
%%      0,43,1006,0,77,3,8,102,-1,8,10,1001,10,1,10,4,10,1008,8,0,10,4,10,102,1,8,193,2,101,
%%      12,10,2,109,18,10,1,1009,13,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,102,1,8,
%%      226,1,1103,1,10,1,1007,16,10,1,3,4,10,1006,0,88,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,
%%      10,4,10,1001,8,0,263,1006,0,50,2,1108,17,10,1006,0,36,1,9,8,10,3,8,1002,8,-1,10,101,1,10,
%%      10,4,10,1008,8,0,10,4,10,1002,8,1,300,1006,0,22,2,106,2,10,2,1001,19,10,1,3,1,10,101,1,9,
%%      9,1007,9,925,10,1005,10,15,99,109,657,104,0,104,1,21101,0,937268454156,1,21102,1,352,0,
%%      1106,0,456,21101,0,666538713748,1,21102,363,1,0,1105,1,456,3,10,104,0,104,1,3,10,104,0,
%%      104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21101,3316845608,
%%      0,1,21102,1,410,0,1105,1,456,21101,0,209475103911,1,21101,421,0,0,1106,0,456,3,10,104,0,104,
%%      0,3,10,104,0,104,0,21101,0,984353603944,1,21101,444,0,0,1105,1,456,21102,1,988220752232,1,
%%      21102,1,455,0,1106,0,456,99,109,2,22101,0,-1,1,21102,40,1,2,21101,487,0,3,21101,0,477,0,
%%      1106,0,520,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,482,483,498,4,0,1001,482,1,
%%     482,108,4,482,10,1006,10,514,1102,0,1,482,109,-2,2105,1,0,0,109,4,2101,0,-1,519,1207,
%%      -3,0,10,1006,10,537,21101,0,0,-3,22101,0,-3,1,22101,0,-2,2,21102,1,1,3,21101,556,0,0,
%%      1106,0,561,109,-4,2106,0,0,109,5,1207,-3,1,10,1006,10,584,2207,-4,-2,10,1006,10,584,
%%      21201,-4,0,-4,1106,0,652,22101,0,-4,1,21201,-3,-1,2,21202,-2,2,3,21101,0,603,0,1105,1,
%%      561,22101,0,1,-4,21102,1,1,-1,2207,-4,-2,10,1006,10,622,21102,1,0,-1,22202,-2,-1,-2,2107,
%%      0,-3,10,1006,10,644,21201,-1,0,1,21101,644,0,0,105,1,519,21202,-2,-1,-2,22201,-4,-2,-4,
%%      109,-5,2106,0,0].


program() ->
    [3,8,1005,8,335,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,102,1,8,28,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,101,0,8,51,1006,0,82,1006,0,56,1,1107,0,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,1001,8,0,83,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,104,1006,0,58,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,1001,8,0,129,1006,0,54,1006,0,50,1006,0,31,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,102,1,8,161,2,101,14,10,1006,0,43,1006,0,77,3,8,102,-1,8,10,1001,10,1,10,4,10,1008,8,0,10,4,10,102,1,8,193,2,101,12,10,2,109,18,10,1,1009,13,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,102,1,8,226,1,1103,1,10,1,1007,16,10,1,3,4,10,1006,0,88,3,8,102,-1,8,10,101,1,10,10,4,10,108,1,8,10,4,10,1001,8,0,263,1006,0,50,2,1108,17,10,1006,0,36,1,9,8,10,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,0,10,4,10,1002,8,1,300,1006,0,22,2,106,2,10,2,1001,19,10,1,3,1,10,101,1,9,9,1007,9,925,10,1005,10,15,99,109,657,104,0,104,1,21101,0,937268454156,1,21102,1,352,0,1106,0,456,21101,0,666538713748,1,21102,363,1,0,1105,1,456,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21101,3316845608,0,1,21102,1,410,0,1105,1,456,21101,0,209475103911,1,21101,421,0,0,1106,0,456,3,10,104,0,104,0,3,10,104,0,104,0,21101,0,984353603944,1,21101,444,0,0,1105,1,456,21102,1,988220752232,1,21102,1,455,0,1106,0,456,99,109,2,22101,0,-1,1,21102,40,1,2,21101,487,0,3,21101,0,477,0,1106,0,520,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,482,483,498,4,0,1001,482,1,482,108,4,482,10,1006,10,514,1102,0,1,482,109,-2,2105,1,0,0,109,4,2101,0,-1,519,1207,-3,0,10,1006,10,537,21101,0,0,-3,22101,0,-3,1,22101,0,-2,2,21102,1,1,3,21101,556,0,0,1106,0,561,109,-4,2106,0,0,109,5,1207,-3,1,10,1006,10,584,2207,-4,-2,10,1006,10,584,21201,-4,0,-4,1106,0,652,22101,0,-4,1,21201,-3,-1,2,21202,-2,2,3,21101,0,603,0,1105,1,561,22101,0,1,-4,21102,1,1,-1,2207,-4,-2,10,1006,10,622,21102,1,0,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,644,21201,-1,0,1,21101,644,0,0,105,1,519,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2106,0,0].


setnth(1, [_|Rest], New) ->
    [New|Rest];
setnth(I, [E|Rest], New) -> 
    [E|setnth(I-1, Rest, New)].

setmatrix(Acc, X, Y,D) ->
    Acc.
    %Row = lists:nth(Y, Acc),
    %RowT = setnth(X, Row, D),
    %AccT = setnth(Y, Acc, RowT),
    %AccT.

mkblank(World) ->
    LX = length(lists:nth(1, World)),
    LY = length(World),
    Row = lists:duplicate(LX, 0),
    Acc = lists:duplicate(LY, Row),
    Acc.

getchar(World,X,Y)->
    0.
    %Char = ((lists:nth(X,lists:nth(Y,World)))),
    %Char.


t1(A,B,C,D,E) ->
    %O = [3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0],
    %O = ic:datan(),
    O = [3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5],
    C5 = spawn(ic,run,[O, self()]),
    C4 = spawn(ic,run,[O, C5]),
    C3 = spawn(ic,run,[O, C4]),
    C2 = spawn(ic,run,[O, C3]),
    C1 = spawn(ic,run,[O, C2]),
    C1 ! A,
    C2 ! B,
    C3 ! C,
    C4 ! D,
    C5 ! E,
    C1 ! 0,
    receive
	X ->
	    X
    end.

turnleft(Dir) ->
    %io:fwrite("Turn left\n"),
    case Dir of 
	{0,-1} ->
	    {-1,0};
	{-1,0} ->
	    {0,1};
	{0,1} ->
	    {1,0};
	{1,0} ->
	    {0,-1}
    end.

turnright(Dir) ->
    %io:fwrite("Turn right\n"),
    case Dir of 
	{0,-1} ->
	    {1,0};
	{1,0} ->
	    {0,1};
	{0,1} ->
	    {-1,0};
	{-1,0} ->
	    {0,-1}
    end.

setup() ->
    C = spawn(ic, run, [program(), self()]),
    C.

getcol(Hull, X, Y) ->
    Key = [X,Y],
    Iskey = maps:is_key(Key, Hull),
    if 
	Iskey ->
	    maps:get(Key, Hull);
	true->
	    0
    end.
				
setcol(Hull, X, Y, Col) ->
    Key = [X,Y],
    maps:put(Key, Col, Hull).


robot(C,Hull,X,Y,Dir,Acc) ->
    CurrC = getcol(Hull, X,Y),
    C ! CurrC,
    receive
	NewCol->
	    NewCol
	    %io:fwrite("NewCol: ~B\n", [NewCol])
    after
	10000 -> 
	    NewCol = -1,
	    io:fwrite("bopp - ~w\n",[maps:size(Hull)]),
	    exit(normal)	
    end,
    receive
	Turn ->
	    Turn
	    %io:fwrite("Turn: ~B\n", [Turn])
    after
	10000 ->	    
	    Turn = -1,
	    io:fwrite("bapp - ~w\n",[Acc]),
	    exit(normal)
    end,

%    {NewCol,Turn} = X,
    AccP = Acc,

    case Turn of
	0 ->
	    NewDir = turnleft(Dir);
	1 ->
	    NewDir = turnright(Dir)
    end,
    NewHull = setcol(Hull,X,Y,NewCol),

    io:fwrite("~B,~B,~B\n",[X,Y,NewCol]),
    

    
    {DX,DY} = NewDir,
    robot(C, NewHull, 
	  X+DX,Y+DY,NewDir,AccP).
t() ->
    X = 0,
    Y = 0,
    Hull = setcol(#{},X,Y,1),

    Dir = {0,-1},
    C=setup(), 
    Acc = [],
    robot(C,Hull,X,Y,Dir,Acc).

% 5672 - too high
